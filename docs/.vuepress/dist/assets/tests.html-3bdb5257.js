import{_ as e,p as r,q as t,a1 as n}from"./framework-5866ffd3.js";const i={},s=n('<h1 id="tests-eng" tabindex="-1"><a class="header-anchor" href="#tests-eng" aria-hidden="true">#</a> Tests (eng)</h1><h2 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests" aria-hidden="true">#</a> Unit-Tests</h2><p>Die Unit-Tests befinden sich in der Klasse <code>GameDataControllerTests.java</code>{.java}. Mithilfe dieser Tests wird die Logik der Klasse <code>GameDataController.java</code>{.java} getestet. Da diese Tests auf das Model (<code>GlobalState</code>{.java}) zugreifen und mit dem Singleton-Pattern dafür gesorgt wird, dass es von dieser Klasse nicht mehrere Instanzen gibt, wird vor jedem Test die Methode <code>clear()</code>{.java} aufgerufen, welche mit der <code>@Before</code>{.java}-Annotation versehen ist und das Model zurücksetzt.</p><p><strong>Name</strong> <strong>Beschreibung</strong> <strong>Check</strong></p><hr><p>createNewGameTest1() Dieser Test überprüft, ob ein Spiel erstellt werden kann.<br> createNewGameTest2() Dieser Test überprüft, ob ein Fehler geworfen wird, wenn zwei Spiele erstellt werden.<br> createNewGameTest3() Dieser Test überprüft, ob kein Spiel vorhanden ist, wenn kein Spiel erstellt wurde.<br> createNewGameTest4() Dieser Test überprüft, ob ein Spiel vorhanden ist, nachdem es erstellt wurde.<br> addUserTest1() Dieser Test überprüft, ob einem Spiel beigetreten werden kann.<br> addUserTest2() Dieser Test überprüft, ob ein Fehler geworfen wird, wenn zwei Spielen beigetreten wird.<br> addUserTest3() Dieser Test überprüft, ob die bereits bestehenden Spiele richtig geladen werden, damit überprüft werden kann, ob ein Spiel bereits existiert oder nicht.<br> usernameAndGameIdAreSetCorrectTest1() Dieser Test überprüft, ob die Eingabe von einer korrekten Game-ID und einem korrekten Username auch als korrekt erkannt wird.<br> usernameAndGameIdAreSetCorrectTest2() Dieser Test überprüft, ob die Eingabe von einer korrekten Game-ID und einem nicht korrekten Username auch als nicht korrekt erkannt wird und dementsprechend ein Fehler geworfen wird.<br> usernameAndGameIdAreSetCorrectTest3() Dieser Test überprüft, ob die Eingabe von einer nicht korrekten Game-ID und einem korrekten Username auch als nicht korrekt erkannt wird und dementsprechend ein Fehler geworfen wird.<br> usernameAndGameIdAreSetCorrectTest4() Dieser Test überprüft, ob die Eingabe von einer nicht korrekten Game-ID und einem nicht korrekten Username auch als nicht korrekt erkannt wird und dementsprechend ein Fehler geworfen wird.<br> generateMrXStartTimesTest1() Dieser Test überprüft, ob die Zeiten berechnet werden können, zu denen Mr. X auftaucht.<br> generateMrXStartTimesTest2() Dieser Test überprüft, ob ein Fehler geworfen wird, wenn die Zeiten von Mr. X berechnet werden sollen, ohne dass die Startzeit des Spiels festgelegt wurde.<br> generateMrXStartTimesTest3() Dieser Test überprüft, ob die Anzahl der Zeiten, an denen Mr. X auftaucht korrekt berechnet werden.<br> generateMrXStartTimesTest4() Dieser Test überprüft, ob die Anzahl der Zeiten, an denen Mr. X auftaucht korrekt berechnet werden.<br> generateMrXStartTimesTest5() Dieser Test überprüft, ob die Anzahl der Zeiten, an denen Mr. X auftaucht korrekt berechnet werden.<br> getLastMrXStartTimeTest1() Dieser Test überprüft, ob bei der Auswahl der nächsten Zeit, zu der Mr. X auftauchen soll, die richtige zurückgegeben wird.<br> getUserByNameTest1() Dieser Test überprüft, ob mit dem Username eines existierenden Spielers auf die Daten des Spielers zugegriffen werden kann.<br> getUserByNameTest2() Dieser Test überprüft, ob ein Fehler geworfen wird, wenn versucht wird auf einen Spieler zuzugreifen, der nicht existiert.<br> updateUserLocationTest1() Dieser Test überprüft, ob der Standort eines existierenden Spielers geändert werden kann.<br> updateUserLocationTest2() Dieser Test überprüft, ob ein Fehler geworfen wird, wenn der Standort eines Spielers geändert wird, der nicht existiert.<br> getMrXGameIdTest1() Dieser Test überprüft, ob die User-ID von Mr. X korrekt zurückgegeben wird.<br> getMrXGameIdTest2() Dieser Test überprüft, ob die User-ID von Mr. X korrekt zurückgegeben wird, nachdem Mr. X geändert wurde.<br> didIFoundMrXTest1() Dieser Test überprüft, ob Mr. X gefunden wird, wenn der korrekte Bluetooth Name angegeben wird.<br> didIFoundMrXTest2() Dieser Test überprüft, ob Mr. X nicht gefunden wird, wenn ein nicht korrekter Bluetooth Name angegeben wird.<br> didIFoundMrXTest3() Dieser Test überprüft, ob Mr. X nicht gefunden wird, wenn ein nicht korrekter Bluetooth Name angegeben wird.<br> didIFoundMrXTest4() Dieser Test überprüft, ob Mr. X nicht gefunden wird, wenn ein nicht korrekter Bluetooth Name angegeben wird.<br> amIMrXTest1() Dieser Test überprüft, ob ich nicht Mr. X bin, wenn dass der Fall ist.<br> amIMrXTest2() Dieser Test überprüft, ob ich Mr. X bin, wenn dass der Fall ist.</p><h2 id="ui-tests" tabindex="-1"><a class="header-anchor" href="#ui-tests" aria-hidden="true">#</a> UI-Tests</h2><p>Die UI-Tests werden mit dem Espresso-Framework durchgeführt und überprüfen, ob die UI-Elemente alle sichtbar sind. Dafür wird vor jedem Test die Methode <code>setData()</code>{.java}, welche mit der <code>@Before</code>{.java}-Annotation versehen ist, aufgerufen. Diese Methode sorgt dafür, dass alle nötigen Daten gespeichert sind, die benötigt werden, um diese Activity aufzurufen.</p>',8),d=[s];function a(o,b){return r(),t("div",null,d)}const h=e(i,[["render",a],["__file","tests.html.vue"]]);export{h as default};
